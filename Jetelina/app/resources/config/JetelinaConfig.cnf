#
#  Jetelina configuration
#

#
#  section of system configuration
#      debug  : define debug mode  true->debug mode false->run mode
#      logfile: logfile name path is fixed in lib/jetelina/log
#      logfilesize: MB order  ex. 10MB -> 10
#      fileuploadpath: define csv file upload path
#      sqllogfile: be executed SQL sentences log file
#      sqllogfilesize: MB order ex. 10MB -> 10
#      time1_logfile_rotation: log file rotation execute time 'from'
#      time2_logfile_rotation: log file rotation execute time 'till'
#           *log file rotation executes between 'time1_logfile_rotation' and 'time2_logfile_rotation'
#           *the watching interval time is default 1hr
#      tablecombinationfile: real sql execution test data file name in json form
#      sqllistfile: real sql list file name
#      sqlperformancefile: sql execution speed data file
#      tableapifile: file name for relation between talbe name and api no
#      experimentsqllistfile: sql list file for execution in test db
#      improvesuggestionfile: suggestion file name due to execute test db
@jdic debug:'debug'
debug = true

@jdic logfile:'log name','log file name','log-name'
logfile = log.txt

@jdic logfilesize:'log file size','log size','log-size'
logfilesize = 10

@jdic fileuploadpath:'upload file path','up load file','file path','repository'
fileuploadpath = repo

@jdic sqllogfile:'sql log file','sql log name','sql-name','sql-log'
sqllogfile = sql.txt

@jdic sqllogfilesize:'sql log file size','sqllog file size','sql log size','sql log size','sqllog-size'
sqllogfilesize = 10

@jdic logfile_rotation_open:'rotation start','rotation open'
logfile_rotation_open = 00:00

@jdic logfile_rotation_close:'rotatin end','rotation close'
logfile_rotation_close = 01:02

#
# analized data file names
# these file names are unchangeable
#
tablecombinationfile = JetelinaTableCombiVsAccessRelation.json
sqllistfile = JetelinaSqlList
sqlaccesscountfile = JetelinaSqlAccess
sqlperformancefile = JetelinaSqlPerformance
tableapifile = JetelinaTableApiRelation
experimentsqllistfile = JetelinaExperimentSqlList
improvesuggestionfile = JetelinaSuggestion.json

#
# column title of sqllogfile/sqllistfile/experimentalsqllistfile
# these column titles are unchangeable
# 
file_column_apino = apino
file_column_sql = sql
file_column_subquery = subquery
file_column_max = max
file_column_min = min
file_column_mean = mean

#
#  default database
#      this parameter is used in calling api if db type were not specified
#      dbtype: type of database   
#                PostgreSQL -> portgresql
#                MySQL      -> mysql
#                Oracle     -> oracle
@jdic dbtype:'db','database','data base'
dbtype = postgresql

# PostgreSQL setting
@jdic pg_host:'host'
pg_host = localhost
@jdic pg_port:'port'
pg_port = 5432
@jdic pg_user:'user','login'
pg_user = postgres
@jdic pg_password:'do not show it, of course'
pg_password = postgres
@jdic pg_sslmode:'sslmode','ssl mode','ssl'
pg_sslmode = prefer
@jdic pg_dbname:'database name','db name','dbname'
pg_dbname = postgres
@jdic pg_testdb:'test'
pg_testdbname = testdb

#
# mysql,oracle and so on are goin to do after postgre is done  2024/3/4
#

# MySQL setting
my_host = localhost
my_port = 
my_user = 
my_password = 
my_sslmode = prefer
my_dbname = 
my_testdbname = testdb

# Oracle setting
or_host = localhost
or_port = 
or_user = 
or_password = 
or_sslmode = prefer
or_dbname = 
or_testdbname = testdb

#
# execution limit number of select sentence in test db
#
@jdic selectlimt:'limit'
selectlimit = 10

# 
# maxmum lines to read 'sqllogfile'
# not sure what number is the best, but this is for secure the system
#
@jdic reading_max_lines:'read line numbers for analyzing','analyzing lines','analyzing line numbers','analyzing line number'
reading_max_lines = 1000

#
# sql analyze execute interval 
#   this param is used in SQLAnalyzer.jl for repeat analyzing processing
#   this number is be hour unit  ex. 10hr interval -> 10 
@jdic analyze_interval:'analyze interval','analyzing interval'
analyze_interval = 48
